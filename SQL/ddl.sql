
-- [MySQL] 계정 추가
create user 'spring'@'localhost' identified by '1111';

select host, user from mysql.user where user='mybrd';

-- [MySQL] 계정 삭제
drop user 'mybrd'@'localhost'

-- [MySQL] 모든 권한 부여 : grant all privileges on 데이터베이스명.테이블명 to '계정명'@'접속위치(host')';
select host, user from mysql.user where user='spring';

grant all privileges on *.* to 'spring'@'localhost' identified by '1111' with grant option;

-- [MySQL] 초기 권한 확인
select * from mysql.user where user='spring';

-- [MySQL] 모든 권한 회수하고 확인
revoke all on *.* from 'spring'@'localhost';
select * from mysql.user where user='mybrd';



select DATE_FORMAT(sysdate(), '%Y%m');
-- Autogenerated: do not edit this file


alter table BATCH_JOB_INSTANCE add( CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

-- alter table BATCH_JOB_INSTANCE add( CREATED_YM  VARCHAR(6) DEFAULT (DATE_FORMAT(sysdate(), '%Y%m')));
-- alter table BATCH_JOB_INSTANCE drop COLUMN CREATED_YM;


drop table BATCH_STEP_EXECUTION_SEQ ;
drop table BATCH_JOB_EXECUTION_SEQ ;
drop table BATCH_JOB_SEQ ;
drop table batch_job_execution_context  ;
drop table batch_job_execution_params   ;
drop table batch_step_execution_context ;
drop table batch_step_execution         ;
drop table batch_job_execution          ;
drop table batch_job_instance           ;


CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT ,
	JOB_NAME VARCHAR(100) NOT NULL,
	JOB_KEY VARCHAR(32) NOT NULL,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT  ,
	JOB_INSTANCE_ID BIGINT NOT NULL,
	CREATE_TIME DATETIME(6) NOT NULL,
	START_TIME DATETIME(6) DEFAULT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	JOB_CONFIGURATION_LOCATION VARCHAR(2500) NULL,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL ,
	TYPE_CD VARCHAR(6) NOT NULL ,
	KEY_NAME VARCHAR(100) NOT NULL ,
	STRING_VAL VARCHAR(250) ,
	DATE_VAL DATETIME(6) DEFAULT NULL ,
	LONG_VAL BIGINT ,
	DOUBLE_VAL DOUBLE PRECISION ,
	IDENTIFYING CHAR(1) NOT NULL ,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY ,
	VERSION BIGINT NOT NULL,
	STEP_NAME VARCHAR(100) NOT NULL,
	JOB_EXECUTION_ID BIGINT NOT NULL,
	START_TIME DATETIME(6) NOT NULL ,
	END_TIME DATETIME(6) DEFAULT NULL ,
	STATUS VARCHAR(10) ,
	COMMIT_COUNT BIGINT ,
	READ_COUNT BIGINT ,
	FILTER_COUNT BIGINT ,
	WRITE_COUNT BIGINT ,
	READ_SKIP_COUNT BIGINT ,
	WRITE_SKIP_COUNT BIGINT ,
	PROCESS_SKIP_COUNT BIGINT ,
	ROLLBACK_COUNT BIGINT ,
	EXIT_CODE VARCHAR(2500) ,
	EXIT_MESSAGE VARCHAR(2500) ,
	LAST_UPDATED DATETIME(6),
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB;

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY,
	SHORT_CONTEXT VARCHAR(2500) NOT NULL,
	SERIALIZED_CONTEXT TEXT ,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB;



CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_STEP_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_EXECUTION_SEQ);

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL,
	UNIQUE_KEY CHAR(1) NOT NULL,
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ (ID, UNIQUE_KEY) select * from (select 0 as ID, '0' as UNIQUE_KEY) as tmp where not exists(select * from BATCH_JOB_SEQ);


---------------------------------------------------------------------------------------------------
/* 테스트 프로시저 : insertData  */
---------------------------------------------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `springbatch`.`insertData`(
     PARAM_PASSWORD INTEGER
)
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i <= PARAM_PASSWORD DO
        INSERT INTO member (password) VALUES (SUBSTR(MD5(RAND()),1,20));
        SET i = i + 1;
    END WHILE;
end
---------------------------------------------------------------------------------------------------
drop table member;
create table member (
    username int auto_increment primary key
  , password varchar(50)
  , created_dt timestamp default current_timestamp
);

select count(*) from member;

show tables like '%member%';


select * from mysql.innodb_index_stats where table_name ='member';

---------------------------------------------------------------------------------------------------
drop table Customer;
create table Customer (
    id int auto_increment primary key
  , firstname varchar(255)
  , lastname varchar(255)
  , birthdate timestamp default current_timestamp
);

show index from `Customer`;
drop index `Customer_x01`;
create index member_x01 on member (password) ;

---------------------------------------------------------------------------------------------------
/* 테스트 프로시저 : insertCustomer  */
---------------------------------------------------------------------------------------------------
CREATE DEFINER=`root`@`localhost` PROCEDURE `springbatch`.`insertCustomer`(
     PARAM_CNT INTEGER
)
BEGIN
    DECLARE i INT DEFAULT 1;
    WHILE i <= PARAM_CNT DO
        INSERT INTO Customer (firstname, lastname) VALUES
            ( SUBSTR(MD5(RAND()),1,30)
            , SUBSTR(MD5(RAND()),1,30)
            );
        SET i = i + 1;
    END WHILE;
end
---------------------------------------------------------------------------------------------------
CALL insertCustomer(10000);
---------------------------------------------------------------------------------------------------










